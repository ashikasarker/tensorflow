# -*- coding: utf-8 -*-
"""TensorFlow project cifar_10

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SR0vUY0LYpXrw0b3PSyxXm1cGZ5sl7gD
"""

from google.colab import drive
drive.mount('/content/drive')

!unzip "/content/drive/MyDrive/Dataset/archive (1).zip" -d "/content/cats_dogs"

import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt
from tensorflow import keras
print(tf.__version__)

from tensorflow.keras.preprocessing import image_dataset_from_directory


train_data = image_dataset_from_directory(
    directory='/content/cats_dogs/training_set/training_set',
    labels='inferred',
    label_mode='int',
    batch_size=None,
    image_size=(32, 32)
)


test_data = image_dataset_from_directory(
    directory='/content/cats_dogs/test_set/test_set',
    labels='inferred',
    label_mode='int',
    batch_size=None,
    image_size=(32, 32)
)

def dataset_to_numpy(data):
    labels = []
    images = []
    for image, label in data:
        images.append(image.numpy().astype('uint8'))
        labels.append(label.numpy())
    images = np.stack(images)
    labels = np.stack(labels).reshape(-1, 1)
    return images, labels

train_images_kaggle, train_labels_kaggle = dataset_to_numpy(train_data)
test_images_kaggle, test_labels_kaggle = dataset_to_numpy(test_data)

train_labels_kaggle = np.where(train_labels_kaggle == 0, 3, 5)
test_labels_kaggle = np.where(test_labels_kaggle == 0, 3, 5)

cifar_10 =  tf.keras.datasets.cifar10
(train_images, train_labels), (test_images, test_labels) = cifar_10.load_data()
class_names = ['airplane', 'car', 'bird', 'cat', 'deer',
               'dog', 'frog', 'horse', 'ship', 'truck']
print(train_images.shape, train_images.dtype, train_images.min(), train_images.max())

train_images = np.concatenate([train_images, train_images_kaggle], axis=0)
train_labels = np.concatenate([train_labels, train_labels_kaggle], axis=0)

test_images = np.concatenate([test_images, test_images_kaggle], axis=0)
test_labels = np.concatenate([test_labels, test_labels_kaggle], axis=0)

print("New training set:", train_images.shape, train_labels.shape)
print("New test set:", test_images.shape, test_labels.shape)

'''classes_to_move = [1, 3, 4, 6]
num_to_move = 100

indices_to_move = []

for labels in classes_to_move:
    cls_indices = np.where(test_labels.flatten() == labels)[0]
    selected = np.random.choice(cls_indices, num_to_move, replace=False)
    indices_to_move.extend(selected)
'''

'''yx_move = test_images[indices_to_move]
y_move = test_labels[indices_to_move]

# Remove from test set
test_images = np.delete(test_images, indices_to_move, axis=0)
test_labels = np.delete(test_labels, indices_to_move, axis=0)

# Add to training set
train_images = np.concatenate([train_images, x_move], axis=0)
train_labels = np.concatenate([train_labels, y_move], axis=0)

print(train_images.shape, train_images.dtype, train_images.min(), train_images.max())
'''

plt.figure()
plt.imshow(train_images[0])
plt.colorbar()
plt.grid(False)
plt.show()

train_images = train_images / 255.0
test_images = test_images / 255.0
train_labels.shape

plt.figure()
for i in range(20):
  plt.subplot (5, 6, i+1)
  plt.xticks([])
  plt.yticks([])
  plt.grid(False)
  plt.imshow(train_images[i])
  plt.xlabel(class_names[train_labels[i][0]])
plt.tight_layout()
plt.show()

model = tf.keras.Sequential([
    tf.keras.layers.Conv2D(32, (3,3), activation='relu', kernel_regularizer=tf.keras.regularizers.l2(0.001), input_shape=(32,32,3)),
    tf.keras.layers.MaxPooling2D((2,2)),
    tf.keras.layers.Conv2D(64, (3,3), activation='relu', kernel_regularizer=tf.keras.regularizers.l2(0.001)),
    tf.keras.layers.MaxPooling2D((2,2)),
    #tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    #tf.keras.layers.MaxPooling2D((2,2)),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(32, activation='relu', kernel_regularizer= tf.keras.regularizers.l2(0.001)),
    tf.keras.layers.Dropout(0.1),
    tf.keras.layers.Dense(10)

])

model.compile(optimizer='adam',
              loss = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
              metrics = ['accuracy'])

model.fit(train_images, train_labels, epochs = 10)

test_loss, test_accuaracy = model.evaluate(test_images, test_labels, verbose=2)
print("Test accuracy: ", test_accuaracy*100)

model_probability = tf.keras.Sequential([model,
                                         tf.keras.layers.Softmax()])
predictions = model_probability.predict(test_images)
predictions[0]

print(np.argmax(predictions[0]))
print(class_names[3])

def plot_image(i, predictions_array, true_label, img):
  #true_label, img = true_label[i][0], img[i][0]
  plt.grid(False)
  plt.xticks([])
  plt.yticks([])

  plt.imshow(img)

  predicted_label = np.argmax(predictions_array)
  if predicted_label == true_label:
    color = 'blue'
  else:
    color = 'red'

  plt.xlabel("{} {:2.0f}% ({})".format(class_names[predicted_label],
                                100*np.max(predictions_array),
                                class_names[true_label]),
                                color=color)

def plot_value_array(i, predictions_array, true_label):
  #true_label = true_label[i][0]
  plt.grid(False)
  plt.xticks(range(10))
  #plt.yticks([])
  thisplot = plt.bar(range(10), predictions_array, color="#777777")
  plt.ylim([0, 1])
  predicted_label = np.argmax(predictions_array)

  thisplot[predicted_label].set_color('red')
  thisplot[true_label].set_color('blue')
  plt.xlabel('Class index')
  plt.ylabel('Prediction Probabilities')
  plt.tight_layout()

i = 112
plt.figure(figsize=(6,3))
plt.subplot(1,2,1)
plot_image(i, predictions[i], test_labels[i][0], test_images[i])
plt.subplot(1,2,2)
plot_value_array(i, predictions[i],  test_labels[i][0])
plt.show()

#num_rows = 5
#num_cols = 3
num_images = 15
plt.figure(figsize=(2*2*3, 2*5))
for i in range(num_images):
  plt.subplot(5, 6, 2*i+1)
  plot_image(i, predictions[i], test_labels[i][0], test_images[i])
  plt.subplot(5, 6, 2*i+2)
  plot_value_array(i, predictions[i], test_labels[i][0])
plt.tight_layout()
plt.show()

dog_indices = np.where(test_labels.flatten() == 5)[0]

num_images = 15
plt.figure(figsize=(2*2*3, 2*5))

for idx, i in enumerate(dog_indices[:num_images]):
    plt.subplot(5, 6, 2*idx+1)
    plot_image(i, predictions[i], test_labels[i][0], test_images[i])
    plt.subplot(5, 6, 2*idx+2)
    plot_value_array(i, predictions[i], test_labels[i][0])

plt.tight_layout()
plt.show()